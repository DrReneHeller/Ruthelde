package com.ruthelde.GA.Uncertainty;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class UncertaintyInputWindow extends JFrame {

    private JPanel pnlFitPara;
    private JTextField tf_E0_min;
    private JTextField tf_alpha_min;
    private JTextField tf_E0_max;
    private JTextField tf_alpha_max;
    private JTextField tf_theta_min;
    private JTextField tf_theta_max;
    private JPanel rootPanel;
    private JTextField tf_n_fits;
    private JTextField tf_n_spectra;
    private JTextField tf_q_min;
    private JTextField tf_q_max;
    private JTextField tf_q_var;
    private JTextField tf_dE_min;
    private JTextField tf_dE_max;
    private JTextField tf_dE_var;
    private JButton pbApply;
    private UncertaintyInput input;

    public UncertaintyInputWindow(UncertaintyInput input) {

        super("Input for Uncertainty Calculation");
        $$$setupUI$$$();
        initComponents();
        this.input = input;

        tf_n_fits.setText(input.numberOfFits + "");
        tf_n_spectra.setText(input.numberOfSpectra + "");
        tf_q_min.setText(String.format("%.2f", input.q_min).replace(",", "."));
        tf_q_max.setText(String.format("%.2f", input.q_max).replace(",", "."));
        tf_q_var.setText(String.format("%.2f", input.q_var).replace(",", "."));
        tf_dE_min.setText(String.format("%.2f", input.dE_min).replace(",", "."));
        tf_dE_max.setText(String.format("%.2f", input.dE_max).replace(",", "."));
        tf_dE_var.setText(String.format("%.2f", input.dE_var).replace(",", "."));
        tf_E0_min.setText(String.format("%.2f", input.E0_min).replace(",", "."));
        tf_E0_max.setText(String.format("%.2f", input.E0_max).replace(",", "."));
        tf_alpha_min.setText(String.format("%.2f", input.alpha_min).replace(",", "."));
        tf_alpha_max.setText(String.format("%.2f", input.alpha_max).replace(",", "."));
        tf_theta_min.setText(String.format("%.2f", input.theta_min).replace(",", "."));
        tf_theta_max.setText(String.format("%.2f", input.theta_max).replace(",", "."));
    }

    private void initComponents() {

        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        this.setContentPane(rootPanel);

        pack();
        this.setMinimumSize(new Dimension(400, 200));
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
    }

    private void createUIComponents() {

        pbApply = new JButton();
        pbApply.addActionListener(e -> {
            try {
                int n_fits = Integer.parseInt(tf_n_fits.getText());
                input.numberOfFits = n_fits;

                int n_spectra = Integer.parseInt(tf_n_spectra.getText());
                input.numberOfSpectra = n_spectra;

                double q_min = Double.parseDouble(tf_q_min.getText());
                input.q_min = q_min;

                double q_max = Double.parseDouble(tf_q_max.getText());
                input.q_max = q_max;

                double q_var = Double.parseDouble(tf_q_var.getText());
                input.q_var = q_var;

                double dE_min = Double.parseDouble(tf_dE_min.getText());
                input.dE_min = dE_min;

                double dE_max = Double.parseDouble(tf_dE_max.getText());
                input.dE_max = dE_max;

                double dE_var = Double.parseDouble(tf_dE_var.getText());
                input.dE_var = dE_var;

                double E0_min = Double.parseDouble(tf_E0_min.getText());
                input.E0_min = E0_min;

                double E0_max = Double.parseDouble(tf_E0_max.getText());
                input.E0_max = E0_max;

                double alpha_min = Double.parseDouble(tf_alpha_min.getText());
                input.alpha_min = alpha_min;

                double alpha_max = Double.parseDouble(tf_alpha_max.getText());
                input.alpha_max = alpha_max;

                double theta_min = Double.parseDouble(tf_theta_min.getText());
                input.theta_min = theta_min;

                double theta_max = Double.parseDouble(tf_theta_max.getText());
                input.theta_max = theta_max;

                this.setVisible(false);

            } catch (Exception ex) {
                System.out.println("Error parsing numeric value");
                ex.printStackTrace();
            }
        });

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pnlFitPara = new JPanel();
        pnlFitPara.setLayout(new GridLayoutManager(6, 6, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(pnlFitPara, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pnlFitPara.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), "Uncertainty Determination Inputs", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setText("E0_min (keV)");
        pnlFitPara.add(label1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_E0_min = new JTextField();
        tf_E0_min.setText("1680");
        pnlFitPara.add(tf_E0_min, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("alpha_min (째)");
        pnlFitPara.add(label2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_alpha_min = new JTextField();
        tf_alpha_min.setText("-5");
        pnlFitPara.add(tf_alpha_min, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("E0_max (keV)");
        pnlFitPara.add(label3, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_E0_max = new JTextField();
        tf_E0_max.setText("1720");
        pnlFitPara.add(tf_E0_max, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        tf_alpha_max = new JTextField();
        tf_alpha_max.setText("5");
        pnlFitPara.add(tf_alpha_max, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("alpha_max (째)");
        pnlFitPara.add(label4, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("theta_min (째)");
        pnlFitPara.add(label5, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_theta_min = new JTextField();
        tf_theta_min.setText("165");
        pnlFitPara.add(tf_theta_min, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("theta_max (째)");
        pnlFitPara.add(label6, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_theta_max = new JTextField();
        tf_theta_max.setText("175");
        pnlFitPara.add(tf_theta_max, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("dE_min (keV)");
        pnlFitPara.add(label7, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_dE_min = new JTextField();
        tf_dE_min.setText("12");
        pnlFitPara.add(tf_dE_min, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        tf_dE_max = new JTextField();
        tf_dE_max.setText("30");
        pnlFitPara.add(tf_dE_max, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("dE_max (keV)");
        pnlFitPara.add(label8, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("dE_var (%)");
        pnlFitPara.add(label9, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_dE_var = new JTextField();
        tf_dE_var.setText("20");
        pnlFitPara.add(tf_dE_var, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("Q_min (쨉C)");
        pnlFitPara.add(label10, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_q_min = new JTextField();
        tf_q_min.setText("2");
        pnlFitPara.add(tf_q_min, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        tf_q_max = new JTextField();
        tf_q_max.setText("2000");
        pnlFitPara.add(tf_q_max, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Q_max (쨉C)");
        pnlFitPara.add(label11, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Q_var (%)");
        pnlFitPara.add(label12, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_q_var = new JTextField();
        tf_q_var.setText("20");
        pnlFitPara.add(tf_q_var, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("# of Spectra");
        pnlFitPara.add(label13, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_n_fits = new JTextField();
        tf_n_fits.setText("3");
        pnlFitPara.add(tf_n_fits, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        final JLabel label14 = new JLabel();
        label14.setText("# of Fits");
        pnlFitPara.add(label14, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tf_n_spectra = new JTextField();
        tf_n_spectra.setText("1");
        pnlFitPara.add(tf_n_spectra, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null, 0, false));
        pbApply.setText("Apply");
        rootPanel.add(pbApply, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
